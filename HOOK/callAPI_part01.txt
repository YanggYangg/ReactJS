import { useEffect, useState } from "react";

//Events: Add / remove event listener
//Observer pattern: Subscribe / unsubscribe
//Closure
//Timers: setInterval, setTimeout , clearTimeout, clearInterval
//useState
//Mounted / Unmounted
// ===
//Call API

/**
 * 1. Update DOM
 *   - F8 blog title
 * 2. Call API
 * 3. Listen DOM events
 *    - Scroll
 *    - Resize
 * 4. Cleanup
 *    - Remove listener/ Unsubscribe
 *    - Clear timer
 */

    //useEffect(calback, [deps])
    /**
     * Đối số thứ 1 là callback (bắt buộc)
     * Đối số thứ 2 là mảng deps
     */

    /**
     * 3 trường hợp: 
     * 1. useEffect(callback)
     * - Gọi callback mỗi khi component render
     * - Gọi callback sau khi component thêm element vào DOM
     * 2. useEffect(callback, [])
     * - Chỉ gọi callback 1 lần sau khi component mounted
     * 3. useEffect(callback, [deps])
     * 
     */

    //
    //1.Callback luôn được gọi sau khi component mounted

function Content(){
    const [title, setTitle] = useState('');
    const [posts, setPosts] = useState([]);

    /**
     * Tình huống này chỉ gọi API một lần để lấy dữ liệu 
     * Hoặc những cái logic muốn chạy một lần 
     */
    useEffect(() => {
         fetch('https://jsonplaceholder.typicode.com/posts')
    .then(response => response.json())
    .then(posts => {
       setPosts(posts);
    })

    }, [])



    //Call API
    /**
     * Không tối ưu
     */
    // fetch('https://jsonplaceholder.typicode.com/posts')
    // .then(response => response.json())
    // .then(posts => {
    //     console.log(posts);
    // })

    //ưu tiên tạo ra giao diện người dùng
    return (
        <div>
            <input 
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            />
            <ul>
                {posts.map(post => (
                    <li key={post.id}>{post.title}</li>
                ))}
            </ul>

        </div>
    )
}

export default Content;