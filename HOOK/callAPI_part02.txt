import { useEffect, useState } from "react";

//Events: Add / remove event listener
//Observer pattern: Subscribe / unsubscribe
//Closure
//Timers: setInterval, setTimeout , clearTimeout, clearInterval
//useState
//Mounted / Unmounted
// === toán tử so sánh 
//Call API

/**
 * 1. Update DOM
 *   - F8 blog title
 * 2. Call API
 * 3. Listen DOM events
 *    - Scroll
 *    - Resize
 * 4. Cleanup
 *    - Remove listener/ Unsubscribe
 *    - Clear timer
 */

    //useEffect(calback, [deps])
    /**
     * Đối số thứ 1 là callback (bắt buộc)
     * Đối số thứ 2 là mảng deps
     */

    /**
     * 3 trường hợp: 
     * 1. useEffect(callback)
     * - Gọi callback mỗi khi component render
     * - Gọi callback sau khi component thêm element vào DOM
     * 2. useEffect(callback, [])
     * - Chỉ gọi callback 1 lần sau khi component mounted
     * 3. useEffect(callback, [deps])
     * - Callback sẽ được gọi lại mỗi khi deps thay đổi
     */

    //
    //1.Callback luôn được gọi sau khi component mounted

    const tabs = ['posts', 'comments', 'albums'];

function Content(){
    const [title, setTitle] = useState('')
    const [posts, setPosts] = useState([])

    const [type, setType] = useState('posts')
    

    /**
     * Tình huống này chỉ gọi API một lần để lấy dữ liệu 
     * Hoặc những cái logic muốn chạy một lần 
     */
    useEffect(() => {
        //console.log('type changed');
         fetch(`https://jsonplaceholder.typicode.com/${type}`)
         .then(res => res.json())
         .then(posts => {
            setPosts(posts);
        })
    }, [type])

    //ưu tiên tạo ra giao diện người dùng
    return (
        <div>
            {tabs.map(tab => (
                <button 
                key={tab}
                style={type === tab ? {
                    color: "#fff",
                    backgroundColor: "#333",
                } : {}}
                onClick={() => setType(tab)}
                >
                    {tab}</button>
            ))}

            <input 
            value={title}
            onChange={e => setTitle(e.target.value)}
            />
            <ul>
                {posts.map(post => (
                    <li key={post.id}>{post.title || post.name}</li>
                ))}
            </ul>

        </div>
    )
}

export default Content;